// Что выведет программа? Объяснить вывод программы.
// Объяснить внутреннее устройство интерфейсов и их отличие от пустых интерфейсов.

// Ответ:
// <nil>
// false
//
// Почему:
// Функция Foo() вернет переменную err типа *os.PathError, которая имплементирует стандартный интерфейс ошибки
// Далее, в мейне, мы принтим нашу переменную, значение которой равны nil
// А затем мы сравниваем переменную типа fs.PathError c nil, что выведет нам false.
// Равенство не получится т.к pathError это структура, с реалезаций интерфейса eror, что в свою очередь означаетт, что этот интерфейс не пустой,
// т.к в нем лежит структура, значение которой равны nil
//
// Внутренее устройсво интерфейсов:
//
// type iface struct {
//     tab  *itab
//     data unsafe.Pointer
// }
//
// поле tab - содержит метаданные о типе объекта, который преобразовываем в интерфейс и список методов, для удовлетворения интерфейса
// поле data - ссылка на конкретный объект, или ссылка на область памяти данных изначального объекта
//
// Пустой интерфейс содержит только data, т.к у него нет методов, что позволяет реализовать его любому типу.

package main

import (
	"fmt"
	"os"
)

func Foo() error {
	var err *os.PathError = nil
	return err
}

type x interface{}

func main() {

	var t x

	err := Foo()
	fmt.Println(err)
	fmt.Println(t == nil)
}
